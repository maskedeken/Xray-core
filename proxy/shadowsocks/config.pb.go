// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proxy/shadowsocks/config.proto

package shadowsocks

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	net "github.com/xtls/xray-core/common/net"
	protocol "github.com/xtls/xray-core/common/protocol"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CipherType int32

const (
	CipherType_UNKNOWN            CipherType = 0
	CipherType_RC4_MD5_6          CipherType = 1
	CipherType_RC4_MD5            CipherType = 2
	CipherType_SM4_128_CFB        CipherType = 3
	CipherType_AES_128_CFB        CipherType = 4
	CipherType_AES_256_CFB        CipherType = 5
	CipherType_CHACHA20           CipherType = 6
	CipherType_CHACHA20_IETF      CipherType = 7
	CipherType_SM4_128_GCM        CipherType = 8
	CipherType_AES_128_GCM        CipherType = 9
	CipherType_AES_256_GCM        CipherType = 10
	CipherType_CHACHA20_POLY1305  CipherType = 11
	CipherType_XCHACHA20_POLY1305 CipherType = 12
	CipherType_NONE               CipherType = 13
)

var CipherType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "RC4_MD5_6",
	2:  "RC4_MD5",
	3:  "SM4_128_CFB",
	4:  "AES_128_CFB",
	5:  "AES_256_CFB",
	6:  "CHACHA20",
	7:  "CHACHA20_IETF",
	8:  "SM4_128_GCM",
	9:  "AES_128_GCM",
	10: "AES_256_GCM",
	11: "CHACHA20_POLY1305",
	12: "XCHACHA20_POLY1305",
	13: "NONE",
}

var CipherType_value = map[string]int32{
	"UNKNOWN":            0,
	"RC4_MD5_6":          1,
	"RC4_MD5":            2,
	"SM4_128_CFB":        3,
	"AES_128_CFB":        4,
	"AES_256_CFB":        5,
	"CHACHA20":           6,
	"CHACHA20_IETF":      7,
	"SM4_128_GCM":        8,
	"AES_128_GCM":        9,
	"AES_256_GCM":        10,
	"CHACHA20_POLY1305":  11,
	"XCHACHA20_POLY1305": 12,
	"NONE":               13,
}

func (x CipherType) String() string {
	return proto.EnumName(CipherType_name, int32(x))
}

func (CipherType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1da88f084d5cf23f, []int{0}
}

type Account struct {
	Password             string     `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	CipherType           CipherType `protobuf:"varint,2,opt,name=cipher_type,json=cipherType,proto3,enum=xray.proxy.shadowsocks.CipherType" json:"cipher_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_1da88f084d5cf23f, []int{0}
}

func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Account) GetCipherType() CipherType {
	if m != nil {
		return m.CipherType
	}
	return CipherType_UNKNOWN
}

type ServerConfig struct {
	// UdpEnabled specified whether or not to enable UDP for Shadowsocks.
	// Deprecated. Use 'network' field.
	UdpEnabled           bool           `protobuf:"varint,1,opt,name=udp_enabled,json=udpEnabled,proto3" json:"udp_enabled,omitempty"` // Deprecated: Do not use.
	User                 *protocol.User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Network              []net.Network  `protobuf:"varint,3,rep,packed,name=network,proto3,enum=xray.common.net.Network" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServerConfig) Reset()         { *m = ServerConfig{} }
func (m *ServerConfig) String() string { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()    {}
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1da88f084d5cf23f, []int{1}
}

func (m *ServerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerConfig.Unmarshal(m, b)
}
func (m *ServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerConfig.Marshal(b, m, deterministic)
}
func (m *ServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerConfig.Merge(m, src)
}
func (m *ServerConfig) XXX_Size() int {
	return xxx_messageInfo_ServerConfig.Size(m)
}
func (m *ServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServerConfig proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *ServerConfig) GetUdpEnabled() bool {
	if m != nil {
		return m.UdpEnabled
	}
	return false
}

func (m *ServerConfig) GetUser() *protocol.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ServerConfig) GetNetwork() []net.Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type ClientConfig struct {
	Server               []*protocol.ServerEndpoint `protobuf:"bytes,1,rep,name=server,proto3" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ClientConfig) Reset()         { *m = ClientConfig{} }
func (m *ClientConfig) String() string { return proto.CompactTextString(m) }
func (*ClientConfig) ProtoMessage()    {}
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1da88f084d5cf23f, []int{2}
}

func (m *ClientConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientConfig.Unmarshal(m, b)
}
func (m *ClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientConfig.Marshal(b, m, deterministic)
}
func (m *ClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConfig.Merge(m, src)
}
func (m *ClientConfig) XXX_Size() int {
	return xxx_messageInfo_ClientConfig.Size(m)
}
func (m *ClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConfig proto.InternalMessageInfo

func (m *ClientConfig) GetServer() []*protocol.ServerEndpoint {
	if m != nil {
		return m.Server
	}
	return nil
}

func init() {
	proto.RegisterEnum("xray.proxy.shadowsocks.CipherType", CipherType_name, CipherType_value)
	proto.RegisterType((*Account)(nil), "xray.proxy.shadowsocks.Account")
	proto.RegisterType((*ServerConfig)(nil), "xray.proxy.shadowsocks.ServerConfig")
	proto.RegisterType((*ClientConfig)(nil), "xray.proxy.shadowsocks.ClientConfig")
}

func init() {
	proto.RegisterFile("proxy/shadowsocks/config.proto", fileDescriptor_1da88f084d5cf23f)
}

var fileDescriptor_1da88f084d5cf23f = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x5d, 0x73, 0xd2, 0x40,
	0x14, 0x35, 0x80, 0x7c, 0xdc, 0x40, 0x4d, 0x77, 0x46, 0x26, 0xc3, 0x83, 0x83, 0xe8, 0x03, 0xa3,
	0x63, 0xd2, 0xa6, 0xa5, 0xe3, 0x83, 0x2f, 0x10, 0xa9, 0x75, 0x2c, 0x81, 0x09, 0xed, 0x58, 0x7d,
	0xc9, 0xc0, 0x66, 0x2d, 0x58, 0x9a, 0xdd, 0xd9, 0x4d, 0x04, 0x7e, 0x89, 0xff, 0xc1, 0xff, 0xe7,
	0xbb, 0xb3, 0x9b, 0x40, 0xd1, 0xd6, 0x07, 0x66, 0xb8, 0xe7, 0x9c, 0x7b, 0xee, 0xbd, 0x67, 0x36,
	0xf0, 0x8c, 0x71, 0xba, 0x5a, 0xdb, 0x62, 0x36, 0x09, 0xe9, 0x52, 0x50, 0x7c, 0x23, 0x6c, 0x4c,
	0xa3, 0x6f, 0xf3, 0x6b, 0x8b, 0x71, 0x1a, 0x53, 0x54, 0x5f, 0xf1, 0xc9, 0xda, 0x52, 0x22, 0x6b,
	0x47, 0xd4, 0x30, 0x31, 0xbd, 0xbd, 0xa5, 0x91, 0x1d, 0x91, 0x58, 0xfe, 0x96, 0x94, 0xdf, 0xa4,
	0x1d, 0x8d, 0x46, 0xc6, 0xa8, 0x0a, 0xd3, 0x85, 0x9d, 0x08, 0xc2, 0x33, 0xee, 0xf9, 0xbf, 0x9c,
	0x20, 0xfc, 0x07, 0xe1, 0x81, 0x60, 0x04, 0xa7, 0x92, 0xd6, 0x77, 0x28, 0x75, 0x31, 0xa6, 0x49,
	0x14, 0xa3, 0x06, 0x94, 0xd9, 0x44, 0x88, 0x25, 0xe5, 0xa1, 0xa9, 0x35, 0xb5, 0x76, 0xc5, 0xdf,
	0xd6, 0xc8, 0x05, 0x1d, 0xcf, 0xd9, 0x8c, 0xf0, 0x20, 0x5e, 0x33, 0x62, 0xe6, 0x9a, 0x5a, 0x7b,
	0xcf, 0x69, 0x59, 0x0f, 0x6f, 0x6b, 0xb9, 0x4a, 0x7a, 0xb1, 0x66, 0xc4, 0x07, 0xbc, 0xfd, 0xdf,
	0xfa, 0xa9, 0x41, 0x75, 0xac, 0x36, 0x70, 0xd5, 0xcd, 0xe8, 0x05, 0xe8, 0x49, 0xc8, 0x02, 0x12,
	0x4d, 0xa6, 0x0b, 0x92, 0x0e, 0x2d, 0xf7, 0x72, 0xa6, 0xe6, 0x43, 0x12, 0xb2, 0x7e, 0x8a, 0x22,
	0x0b, 0x0a, 0xf2, 0x24, 0x35, 0x53, 0x77, 0x1a, 0xe9, 0xcc, 0xf4, 0x30, 0x6b, 0x73, 0x98, 0x75,
	0x29, 0x08, 0xf7, 0x95, 0x0e, 0x39, 0x50, 0xca, 0x12, 0x32, 0xf3, 0xcd, 0x7c, 0x7b, 0xcf, 0x31,
	0xff, 0x6a, 0x89, 0x48, 0x6c, 0x79, 0x29, 0xef, 0x6f, 0x84, 0xad, 0x73, 0xa8, 0xba, 0x8b, 0x39,
	0x89, 0xe2, 0x6c, 0xb1, 0x77, 0x50, 0x4c, 0xa3, 0x32, 0xb5, 0x66, 0xbe, 0xad, 0x3b, 0x2f, 0x1f,
	0x9e, 0x9a, 0x1e, 0xd3, 0x8f, 0x42, 0x46, 0xe7, 0x51, 0xec, 0x67, 0x3d, 0xaf, 0x7e, 0x6b, 0x00,
	0x77, 0x11, 0x20, 0x1d, 0x4a, 0x97, 0xde, 0x27, 0x6f, 0xf8, 0xd9, 0x33, 0x1e, 0xa1, 0x1a, 0x54,
	0x7c, 0xf7, 0x38, 0x18, 0xbc, 0xef, 0x04, 0x27, 0x86, 0x26, 0xb9, 0xac, 0x34, 0x72, 0xe8, 0x09,
	0xe8, 0xe3, 0xc1, 0x71, 0x70, 0xe8, 0xbc, 0x0d, 0xdc, 0xd3, 0x9e, 0x91, 0x97, 0x40, 0xb7, 0x3f,
	0xde, 0x02, 0x85, 0x0d, 0xe0, 0x74, 0x4e, 0x14, 0xf0, 0x18, 0x55, 0xa1, 0xec, 0x9e, 0x75, 0xdd,
	0xb3, 0xae, 0x73, 0x60, 0x14, 0xd1, 0x3e, 0xd4, 0x36, 0x55, 0xf0, 0xb1, 0x7f, 0x71, 0x6a, 0x94,
	0x76, 0x3d, 0x3f, 0xb8, 0x03, 0xa3, 0xbc, 0xeb, 0x29, 0x81, 0xca, 0xae, 0xa7, 0x04, 0x00, 0x3d,
	0x85, 0xfd, 0xad, 0xcb, 0x68, 0x78, 0xfe, 0xe5, 0xf0, 0xe8, 0xa0, 0x63, 0xe8, 0xa8, 0x0e, 0xe8,
	0xea, 0x3e, 0x5e, 0x45, 0x65, 0x28, 0x78, 0x43, 0xaf, 0x6f, 0xd4, 0x7a, 0x21, 0xc8, 0xc7, 0xf8,
	0x9f, 0x47, 0x31, 0xd2, 0xbe, 0xbe, 0xbe, 0x9e, 0xc7, 0xb3, 0x64, 0x2a, 0x63, 0xb4, 0x57, 0xf1,
	0x42, 0xd8, 0x52, 0xf9, 0x06, 0x53, 0x4e, 0xec, 0x7b, 0x9f, 0xc5, 0xaf, 0x5c, 0xfd, 0x4a, 0xfa,
	0x8c, 0x94, 0xcf, 0xf8, 0x8e, 0x98, 0x16, 0x55, 0xfc, 0x47, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0x1b, 0xd3, 0x3d, 0x4b, 0x03, 0x00, 0x00,
}
